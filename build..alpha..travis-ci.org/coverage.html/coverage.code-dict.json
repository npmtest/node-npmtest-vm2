{"/home/travis/build/npmtest/node-npmtest-vm2/test.js":"/* istanbul instrument in package npmtest_vm2 */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-vm2/lib.npmtest_vm2.js":"/* istanbul instrument in package npmtest_vm2 */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_vm2 = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_vm2 = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-vm2/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-vm2 && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_vm2 */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_vm2\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_vm2.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_vm2.rollup.js'] =\n            local.assetsDict['/assets.npmtest_vm2.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_vm2.__dirname + '/lib.npmtest_vm2.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-vm2/node_modules/vm2/index.js":"if (parseInt(process.versions.node.split('.')[0]) < 6) throw new Error('vm2 requires Node.js version 6 or newer.');\n\nmodule.exports = require(\"./lib/main\");\n","/home/travis/build/npmtest/node-npmtest-vm2/node_modules/vm2/lib/main.js":"const fs = require('fs');\nconst vm = require('vm');\nconst pa = require('path');\nconst {EventEmitter} = require('events');\n\nconst sb = fs.readFileSync(`${__dirname}/sandbox.js`, 'utf8');\nconst cf = fs.readFileSync(`${__dirname}/contextify.js`, 'utf8');\n\nconst PROTECTED = ['constructor', '__proto__'];\n\nconst _compileToJS = function compileToJS(code, compiler) {\n\tif ('function' === typeof compiler) return compiler(code);\n\n\tswitch (compiler) {\n\t\tcase 'coffeescript':\n\t\tcase 'coffee-script':\n\t\tcase 'cs':\n\t\tcase 'text/coffeescript':\n\t\t\treturn require('coffee-script').compile(code, {header: false, bare: true});\n\n\t\tcase 'javascript':\n\t\tcase 'java-script':\n\t\tcase 'js':\n\t\tcase 'text/javascript':\n\t\t\treturn code;\n\n\t\tdefault:\n\t\t\tthrow new VMError(`Unsupported compiler '${compiler}'.`);\n\t}\n};\n\n/**\n * Class Script\n * \n * @class\n */\n\nclass VMScript {\n\t/**\n\t * Create VMScript instance.\n\t *\n\t * @param {String} code Code to run.\n\t * @param {String} [filename] Filename that shows up in any stack traces produced from this script.\n\t * @return {VMScript}\n\t */\n\n\tconstructor(code, filename) {\n\t\tthis.code = code;\n\t\tthis.filename = filename || 'vm.js';\n\t}\n\n\t/**\n\t * Wraps the code.\n\t *\n\t * @return {VMScript}\n\t */\n\t\n\twrap(prefix, postfix) {\n\t\tif (this._wrapped) return this;\n\t\tthis.code = prefix + this.code + postfix;\n\t\tthis._wrapped = true;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Compiles the code. If called multiple times, the code is only compiled once.\n\t *\n\t * @return {VMScript}\n\t */\n\t\n\tcompile() {\n\t\tif (this._compiled) return this;\n\t\t\n\t\tthis._compiled = new vm.Script(this.code, {\n\t\t\tfilename: this.filename,\n\t\t\tdisplayErrors: false\n\t\t})\n\t\t\n\t\treturn this;\n\t}\n}\n\n/**\n * Class VM.\n *\n * @property {Object} options VM options.\n */\n\nclass VM extends EventEmitter {\n\t/**\n\t * Makes the object read only.\n\t *\n\t * @static\n\t * @param {*} object Object to freeze.\n\t * @return {*} Frozen object.\n\t */\n\n\t/**\n\t * Create VM instance.\n\t *\n\t * @param {Object} [options] VM options.\n\t * @return {VM}\n\t */\n\n\tconstructor(options = {}) {\n\t\tsuper();\n\n\t\t// defaults\n\t\tthis.options = {\n\t\t\ttimeout: options.timeout != null ? options.timeout : undefined,\n\t\t\tsandbox: options.sandbox != null ? options.sandbox : null,\n\t\t\tcompiler: options.compiler != null ? options.compiler : 'javascript'\n\t\t};\n\n\t\tconst host = {\n\t\t\tconsole,\n\t\t\tString,\n\t\t\tNumber,\n\t\t\tBuffer,\n\t\t\tBoolean,\n\t\t\tArray,\n\t\t\tDate,\n\t\t\tError,\n\t\t\tRangeError,\n\t\t\tReferenceError,\n\t\t\tSyntaxError,\n\t\t\tTypeError,\n\t\t\tRegExp,\n\t\t\tFunction,\n\t\t\tObject,\n\t\t\tVMError,\n\t\t\tProxy,\n\t\t\tReflect,\n\t\t\tMap,\n\t\t\tWeakMap,\n\t\t\tSet,\n\t\t\tWeakSet,\n\t\t\tPromise\n\t\t};\n\n\t\tthis._context = vm.createContext();\n\n\t\tReflect.defineProperty(this, '_internal', {\n\t\t\tvalue: vm.runInContext(`(function(require, host) { ${cf} \\n})`, this._context, {\n\t\t\t\tfilename: `${__dirname}/contextify.js`,\n\t\t\t\tdisplayErrors: false\n\t\t\t}).call(this._context, require, host)\n\t\t});\n\n\t\t// prepare global sandbox\n\t\tif (this.options.sandbox) {\n\t\t\tif ('object' !== typeof this.options.sandbox) {\n\t\t\t\tthrow new VMError(\"Sandbox must be object.\");\n\t\t\t}\n\n\t\t\tfor (let name in this.options.sandbox) {\n\t\t\t\tthis._internal.Contextify.globalValue(this.options.sandbox[name], name);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Freezes the object inside VM making it read-only. Not available for primitive values.\n\t *\n\t * @static\n\t * @param {*} object Object to freeze.\n\t * @param {String} [globalName] Whether to add the object to global.\n\t * @return {*} Object to freeze.\n\t */\n\n\tfreeze(value, globalName) {\n\t\tthis._internal.Contextify.readonly(value);\n\t\tif (global) this._internal.Contextify.globalValue(value, globalName);\n\t\treturn value;\n\t}\n\n\t/**\n\t * Protects the object inside VM making impossible to set functions as it's properties. Not available for primitive values.\n\t *\n\t * @static\n\t * @param {*} object Object to protect.\n\t * @param {String} [globalName] Whether to add the object to global.\n\t * @return {*} Object to protect.\n\t */\n\n\tprotect(value, globalName) {\n\t\tthis._internal.Contextify.protected(value);\n\t\tif (global) this._internal.Contextify.globalValue(value, globalName);\n\t\treturn value;\n\t}\n\n\t/**\n\t * Run the code in VM.\n\t *\n\t * @param {String} code Code to run.\n\t * @return {*} Result of executed code.\n\t */\n\n\trun(code) {\n\t\tif (this.options.compiler !== 'javascript') {\n\t\t\tcode = _compileToJS(code, this.options.compiler);\n\t\t}\n\t\t\n\t\tconst script = code instanceof VMScript ? code : new VMScript(code);\n\n\t\ttry {\n\t\t\treturn this._internal.Decontextify.value(script.compile()._compiled.runInContext(this._context, {\n\t\t\t\tfilename: script.filename,\n\t\t\t\tdisplayErrors: false,\n\t\t\t\ttimeout: this.options.timeout\n\t\t\t}));\n\t\t} catch (e) {\n\t\t\tthrow this._internal.Decontextify.value(e);\n\t\t}\n\t}\n}\n\n/**\n * Class NodeVM.\n * \n * @class\n * @extends {EventEmitter}\n * @property {Object} module Pointer to main module.\n */\n\nclass NodeVM extends EventEmitter {\n\t/**\n\t * Create NodeVM instance.\n\t *\n\t * Unlike VM, NodeVM lets you use require same way like in regular node.\n\t *\n\t * @param {Object} [options] VM options.\n\t * @return {NodeVM}\n\t */\n\n\tconstructor(options = {}) {\n\t\tsuper();\n\n\t\t// defaults\n\t\tthis.options = {\n\t\t\tsandbox: options.sandbox != null ? options.sandbox : null,\n\t\t\tconsole: options.console != null ? options.console : 'inherit',\n\t\t\trequire: options.require != null ? options.require : false,\n\t\t\tcompiler: options.compiler != null ? options.compiler : 'javascript',\n\t\t\trequire: options.require != null ? options.require : false,\n\t\t\tnesting: options.nesting != null ? options.nesting : false,\n\t\t\twrapper: options.wrapper != null ? options.wrapper : 'commonjs'\n\t\t};\n\n\t\tconst host = {\n\t\t\trequire,\n\t\t\tprocess,\n\t\t\tconsole,\n\t\t\tsetTimeout,\n\t\t\tsetInterval,\n\t\t\tsetImmediate,\n\t\t\tclearTimeout,\n\t\t\tclearInterval,\n\t\t\tclearImmediate,\n\t\t\tString,\n\t\t\tNumber,\n\t\t\tBuffer,\n\t\t\tBoolean,\n\t\t\tArray,\n\t\t\tDate,\n\t\t\tError,\n\t\t\tRangeError,\n\t\t\tReferenceError,\n\t\t\tSyntaxError,\n\t\t\tTypeError,\n\t\t\tRegExp,\n\t\t\tFunction,\n\t\t\tObject,\n\t\t\tVMError,\n\t\t\tProxy,\n\t\t\tReflect,\n\t\t\tMap,\n\t\t\tWeakMap,\n\t\t\tSet,\n\t\t\tWeakSet,\n\t\t\tPromise\n\t\t}\n\n\t\tif (this.options.nesting) {\n\t\t\thost.VM = VM;\n\t\t\thost.NodeVM = NodeVM;\n\t\t}\n\n\t\tthis._context = vm.createContext();\n\n\t\tObject.defineProperty(this, '_internal', {\n\t\t\tvalue: vm.runInContext(`(function(require, host) { ${cf} \\n})`, this._context, {\n\t\t\t\tfilename: `${__dirname}/contextify.js`,\n\t\t\t\tdisplayErrors: false\n\t\t\t}).call(this._context, require, host)\n\t\t})\n\n\t\tconst closure = vm.runInContext(`(function (vm, host, Contextify, Decontextify, Buffer) { ${sb} \\n})`, this._context, {\n\t\t\tfilename: `${__dirname}/sandbox.js`,\n\t\t\tdisplayErrors: false\n\t\t})\n\n\t\tObject.defineProperty(this, '_prepareRequire', {\n\t\t\tvalue: closure.call(this._context, this, host, this._internal.Contextify, this._internal.Decontextify, this._internal.Buffer)\n\t\t})\n\n\t\t// prepare global sandbox\n\t\tif (this.options.sandbox) {\n\t\t\tif ('object' !== typeof this.options.sandbox) {\n\t\t\t\tthrow new VMError(\"Sandbox must be object.\");\n\t\t\t}\n\n\t\t\tfor (let name in this.options.sandbox) {\n\t\t\t\tthis._internal.Contextify.globalValue(this.options.sandbox[name], name);\n\t\t\t}\n\t\t}\n\n\t\tif (this.options.require && this.options.require.import) {\n\t\t\tif (!Array.isArray(this.options.require.import)) {\n\t\t\t\tthis.options.require.import = [this.options.require.import];\n\t\t\t}\n\n\t\t\tfor (let i = 0, l = this.options.require.import.length; i < l; i++) {\n\t\t\t\tthis.require(this.options.require.import[i]);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * @deprecated\n\t */\n\n\tcall(method, ...args) {\n\t\tif ('function' === typeof method) {\n\t\t\treturn method.apply(args);\n\n\t\t} else {\n\t\t\tthrow new VMError(\"Unrecognized method type.\");\n\t\t}\n\t}\n\n\t/**\n\t * Freezes the object inside VM making it read-only. Not available for primitive values.\n\t *\n\t * @static\n\t * @param {*} object Object to freeze.\n\t * @param {String} [globalName] Whether to add the object to global.\n\t * @return {*} Object to freeze.\n\t */\n\n\tfreeze(value, globalName) {\n\t\tthis._internal.Contextify.readonly(value);\n\t\tif (global) this._internal.Contextify.globalValue(value, globalName);\n\t\treturn value;\n\t}\n\n\t/**\n\t * Protects the object inside VM making impossible to set functions as it's properties. Not available for primitive values.\n\t *\n\t * @static\n\t * @param {*} object Object to protect.\n\t * @param {String} [globalName] Whether to add the object to global.\n\t * @return {*} Object to protect.\n\t */\n\n\tprotect(value, globalName) {\n\t\tthis._internal.Contextify.protected(value);\n\t\tif (global) this._internal.Contextify.globalValue(value, globalName);\n\t\treturn value;\n\t}\n\n\t/**\n\t * Require a module in VM and return it's exports.\n\t *\n\t * @param {String} module Module name.\n\t * @return {*} Exported module.\n\t */\n\n\trequire(module) {\n\t\treturn this.run(`module.exports = require('${module}');`, 'vm.js');\n\t}\n\n\t/**\n\t * Run the code in NodeVM.\n\t *\n\t * First time you run this method, code is executed same way like in node's regular `require` - it's executed with `module`, `require`, `exports`, `__dirname`, `__filename` variables and expect result in `module.exports'.\n\t *\n\t * @param {String} code Code to run.\n\t * @param {String} [filename] Filename that shows up in any stack traces produced from this script.\n\t * @return {*} Result of executed code.\n\t */\n\n\trun(code, filename) {\n\t\tif (this.options.compiler !== 'javascript') {\n\t\t\tcode = _compileToJS(code, this.options.compiler);\n\t\t}\n\n\t\tif (filename) {\n\t\t\tfilename = pa.resolve(filename);\n\t\t\tvar dirname = pa.dirname(filename);\n\n\t\t} else {\n\t\t\tfilename = null;\n\t\t\tvar dirname = null;\n\t\t}\n\n\t\tconst module = vm.runInContext(\"({exports: {}})\", this._context, {\n\t\t\tdisplayErrors: false\n\t\t});\n\t\t\n\t\tconst script = code instanceof VMScript ? code : new VMScript(code, filename);\n\t\tscript.wrap('(function (exports, require, module, __filename, __dirname) { ', ' \\n})');\n\n\t\ttry {\n\t\t\tconst closure = script.compile()._compiled.runInContext(this._context, {\n\t\t\t\tfilename: script.filename,\n\t\t\t\tdisplayErrors: false\n\t\t\t});\n\n\t\t\tvar returned = closure.call(this._context, module.exports, this._prepareRequire(dirname), module, filename, dirname);\n\t\t} catch (e) {\n\t\t\tthrow this._internal.Decontextify.value(e);\n\t\t}\n\n\t\tif (this.options.wrapper === 'commonjs') {\n\t\t\treturn this._internal.Decontextify.value(module.exports);\n\t\t} else {\n\t\t\treturn this._internal.Decontextify.value(returned);\n\t\t}\n\t}\n\n\t/**\n\t * Create NodeVM and run code inside it.\n\t *\n\t * @param {String} script Javascript code.\n\t * @param {String} [filename] File name (used in stack traces only).\n\t * @param {Object} [options] VM options.\n\t * @return {NodeVM} VM.\n\t */\n\n\tstatic code(script, filename, options) {\n\t\tif (filename != null) {\n\t\t\tif ('object' === typeof filename) {\n\t\t\t\toptions = filename;\n\t\t\t\tfilename = null;\n\t\t\t} else if ('string' === typeof filename) {\n\t\t\t\tfilename = pa.resolve(filename);\n\t\t\t} else {\n\t\t\t\tthrow new VMError(\"Invalid arguments.\");\n\t\t\t}\n\t\t}\n\n\t\tif (arguments.length > 3) {\n\t\t\tthrow new VMError(\"Invalid number of arguments.\");\n\t\t}\n\n\t\treturn new NodeVM(options).run(script, filename);\n\t}\n\n\t/**\n\t * Create NodeVM and run script from file inside it.\n\t *\n\t * @param {String} [filename] File name (used in stack traces only).\n\t * @param {Object} [options] VM options.\n\t * @return {NodeVM} VM.\n\t */\n\n\tstatic file(filename, options) {\n\t\tfilename = pa.resolve(filename);\n\n\t\tif (!fs.existsSync(filename)) {\n\t\t\tthrow new VMError(`Script '${filename}' not found.`);\n\t\t}\n\n\t\tif (fs.statSync(filename).isDirectory()) {\n\t\t\tthrow new VMError(\"Script must be file, got directory.\");\n\t\t}\n\n\t\treturn new NodeVM(options).run(fs.readFileSync(filename, 'utf8'), filename);\n\t}\n}\n\n/**\n * VMError.\n *\n * @class\n * @extends {Error}\n * @property {String} stack Call stack.\n * @property {String} message Error message.\n */\n\nclass VMError extends Error {\n\t/**\n\t * Create VMError instance.\n\t *\n\t * @param {String} message Error message.\n\t * @return {VMError}\n\t */\n\n\tconstructor(message) {\n\t\tsuper(message);\n\n\t\tthis.name = 'VMError';\n\n\t\tError.captureStackTrace(this, this.constructor);\n\t}\n}\n\nexports.VMError = VMError;\nexports.NodeVM = NodeVM;\nexports.VM = VM;\nexports.VMScript = VMScript;\n","/home/travis/build/npmtest/node-npmtest-vm2/node_modules/vm2/lib/cli.js":"const fs = require('fs');\nconst pa = require('path');\n\nconst {NodeVM, VMError} = require('../');\n\nif (process.argv[2]) {\n\tconst path = pa.resolve(process.argv[2]);\n\n\tconsole.log(`\\x1B[90m[vm] creating VM for ${path}\\x1B[39m`);\n\tconst started = Date.now();\n\n\ttry {\n\t\tNodeVM.file(path, {\n\t\t\tverbose: true,\n\t\t\trequire: {\n\t\t\t\texternal: true\n\t\t\t}\n\t\t});\n\n\t\tconsole.log(`\\x1B[90m[vm] VM completed in ${Date.now() - started}ms\\x1B[39m`);\n\t} catch (ex) {\n\t\tif (ex instanceof VMError) {\n\t\t\tconsole.error(`\\x1B[31m[vm:error] ${ex.message}\\x1B[39m`);\n\t\t} else {\n\t\t\tconst {stack} = ex;\n\n\t\t\tif (stack) {\n\t\t\t\tconsole.error(`\\x1B[31m[vm:error] ${stack}\\x1B[39m`);\n\t\t\t} else {\n\t\t\t\tconsole.error(`\\x1B[31m[vm:error] ${ex}\\x1B[39m`);\n\t\t\t}\n\t\t}\n\t}\n}\n","/home/travis/build/npmtest/node-npmtest-vm2/node_modules/vm2/lib/contextify.js":"'use strict'\n\nconst global = this;\nconst console = host.console;\n\n// global is originally prototype of host.Object so it can be used to climb up from the sandbox.\nObject.setPrototypeOf(global, Object.prototype);\n\nObject.defineProperties(global, {\n\tglobal: {value: global},\n\tGLOBAL: {value: global},\n\troot: {value: global},\n\tisVM: {value: true}\n});\n\nconst DEBUG = false;\nconst OPNA = 'Operation not allowed on contextified object.';\nconst ERROR_CST = Error.captureStackTrace;\nconst FROZEN_TRAPS = {\n\tset: (target, key) => false,\n\tsetPrototypeOf: (target, key) => false,\n\tdefineProperty: (target, key) => false,\n\tdeleteProperty: (target, key) => false,\n\tisExtensible: (target, key) => false,\n\tpreventExtensions: (target) => false\n}\n\n// Map of contextified objects to original objects\nconst Contextified = new host.WeakMap();\nconst Decontextified = new host.WeakMap();\n\n/**\n * VMError definition.\n */\n\nglobal.VMError = class VMError extends Error {\n\tconstructor(message, code) {\n\t\tsuper(message);\n\n\t\tthis.name = 'VMError';\n\t\tthis.code = code;\n\n\t\tERROR_CST(this, this.constructor);\n\t}\n}\n\n/**\n * Decontextify.\n */\n\nconst Decontextify = {\n\tproxies: new host.WeakMap(),\n\n\targuments: function(args) {\n\t\tif (!host.Array.isArray(args)) return new host.Array();\n\n\t\tconst arr = new host.Array();\n\t\tfor (let i = 0, l = args.length; i < l; i++) arr[i] = Decontextify.value(args[i]);\n\t\treturn arr;\n\t},\n\tinstance: function(instance, klass, deepTraps, flags) {\n\t\treturn Decontextify.object(instance, {\n\t\t\tget: (target, key, receiver) => {\n\t\t\t\tif (key === 'vmProxyTarget' && DEBUG) return instance;\n\t\t\t\tif (key === 'isVMProxy') return true;\n\t\t\t\tif (key === 'constructor') return klass;\n\t\t\t\tif (key === '__proto__') return klass.prototype;\n\n\t\t\t\ttry {\n\t\t\t\t\treturn Decontextify.value(instance[key], null, deepTraps, flags);\n\t\t\t\t} catch (e) {\n\t\t\t\t\tthrow Decontextify.value(e);\n\t\t\t\t}\n\t\t\t},\n\t\t\tgetPrototypeOf: (target) => {\n\t\t\t\treturn klass.prototype;\n\t\t\t}\n\t\t}, deepTraps, flags);\n\t},\n\tfunction: function(fnc, traps, deepTraps, flags, mock) {\n\t\tconst self = Decontextify.object(fnc, host.Object.assign({\n\t\t\tapply: (target, context, args) => {\n\t\t\t\ttry {\n\t\t\t\t\tcontext = Contextify.value(context);\n\n\t\t\t\t\t// Set context of all arguments to vm's context.\n\t\t\t\t\treturn Decontextify.value(fnc.apply(context, Contextify.arguments(args)));\n\t\t\t\t} catch (e) {\n\t\t\t\t\tthrow Decontextify.value(e);\n\t\t\t\t}\n\t\t\t},\n\t\t\tconstruct: (target, args, newTarget) => {\n\t\t\t\ttry {\n\t\t\t\t\treturn Decontextify.instance(new fnc(...Contextify.arguments(args)), self, deepTraps, flags);\n\t\t\t\t} catch (e) {\n\t\t\t\t\tthrow Decontextify.value(e);\n\t\t\t\t}\n\t\t\t},\n\t\t\tget: (target, key, receiver) => {\n\t\t\t\tif (key === 'vmProxyTarget' && DEBUG) return fnc;\n\t\t\t\tif (key === 'isVMProxy') return true;\n\t\t\t\tif (mock && key in mock) return mock[key];\n\t\t\t\tif (key === 'constructor') return host.Function;\n\t\t\t\tif (key === '__proto__') return host.Function.prototype;\n\n\t\t\t\ttry {\n\t\t\t\t\treturn Decontextify.value(fnc[key], null, deepTraps, flags);\n\t\t\t\t} catch (e) {\n\t\t\t\t\tthrow Decontextify.value(e);\n\t\t\t\t}\n\t\t\t},\n\t\t\tgetPrototypeOf: (target) => {\n\t\t\t\treturn host.Function.prototype;\n\t\t\t}\n\t\t}, traps), deepTraps);\n\n\t\treturn self;\n\t},\n\tobject: function(object, traps, deepTraps, flags, mock) {\n\t\tconst proxy = new host.Proxy(object, host.Object.assign({\n\t\t\tget: (target, key, receiver) => {\n\t\t\t\tif (key === 'vmProxyTarget' && DEBUG) return object;\n\t\t\t\tif (key === 'isVMProxy') return true;\n\t\t\t\tif (mock && key in mock) return mock[key];\n\t\t\t\tif (key === 'constructor') return host.Object;\n\t\t\t\tif (key === '__proto__') return host.Object.prototype;\n\n\t\t\t\ttry {\n\t\t\t\t\treturn Decontextify.value(object[key], null, deepTraps, flags);\n\t\t\t\t} catch (e) {\n\t\t\t\t\tthrow Decontextify.value(e);\n\t\t\t\t}\n\t\t\t},\n\t\t\tset: (target, key, value, receiver) => {\n\t\t\t\ttry {\n\t\t\t\t\tobject[key] = Contextify.value(value);\n\t\t\t\t\treturn true;\n\t\t\t\t} catch (e) {\n\t\t\t\t\tthrow Decontextify.value(e);\n\t\t\t\t}\n\t\t\t},\n\t\t\tgetOwnPropertyDescriptor: (target, prop) => {\n\t\t\t\ttry {\n\t\t\t\t\tvar def = host.Object.getOwnPropertyDescriptor(object, prop);\n\t\t\t\t} catch (e) {\n\t\t\t\t\tthrow Decontextify.value(e);\n\t\t\t\t}\n\n\t\t\t\t// Following code prevents V8 to throw\n\t\t\t\t// TypeError: 'getOwnPropertyDescriptor' on proxy: trap reported non-configurability for property '<prop>' which is either non-existant or configurable in the proxy target\n\n\t\t\t\tif (!def) {\n\t\t\t\t\treturn undefined;\n\t\t\t\t} else if (def.get || def.set) {\n\t\t\t\t\treturn {\n\t\t\t\t\t\tget: Decontextify.value(def.get) || undefined,\n\t\t\t\t\t\tset: Decontextify.value(def.set) || undefined,\n\t\t\t\t\t\tenumerable: def.enumerable === true,\n\t\t\t\t\t\tconfigurable: def.configurable === true\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\treturn {\n\t\t\t\t\t\tvalue: Decontextify.value(def.value),\n\t\t\t\t\t\twritable: def.writable === true,\n\t\t\t\t\t\tenumerable: def.enumerable === true,\n\t\t\t\t\t\tconfigurable: def.configurable === true\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\t\t\tdefineProperty: (target, key, descriptor) => {\n\t\t\t\ttry {\n\t\t\t\t\tif (descriptor.get || descriptor.set) {\n\t\t\t\t\t\treturn host.Object.defineProperty(target, key, {\n\t\t\t\t\t\t\tget: Contextify.value(descriptor.get, null, deepTraps, flags) || undefined,\n\t\t\t\t\t\t\tset: Contextify.value(descriptor.set, null, deepTraps, flags) || undefined,\n\t\t\t\t\t\t\tenumerable: descriptor.enumerable === true,\n\t\t\t\t\t\t\tconfigurable: descriptor.configurable === true\n\t\t\t\t\t\t})\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn host.Object.defineProperty(target, key, {\n\t\t\t\t\t\t\tvalue: Contextify.value(descriptor.value, null, deepTraps, flags),\n\t\t\t\t\t\t\twritable: descriptor.writable === true,\n\t\t\t\t\t\t\tenumerable: descriptor.enumerable === true,\n\t\t\t\t\t\t\tconfigurable: descriptor.configurable === true\n\t\t\t\t\t\t})\n\t\t\t\t\t}\n\t\t\t\t} catch (e) {\n\t\t\t\t\tthrow Decontextify.value(e);\n\t\t\t\t}\n\t\t\t},\n\t\t\tgetPrototypeOf: (target) => {\n\t\t\t\treturn host.Object.prototype;\n\t\t\t},\n\t\t\tsetPrototypeOf: (target) => {\n\t\t\t\tthrow new host.Error(OPNA);\n\t\t\t}\n\t\t}, traps, deepTraps));\n\n\t\tDecontextify.proxies.set(object, proxy);\n\t\tDecontextified.set(proxy, object);\n\t\treturn proxy;\n\t},\n\tvalue: function(value, traps, deepTraps, flags, mock) {\n\t\tif (Contextified.has(value)) {\n\t\t\t// Contextified object has returned back from vm\n\t\t\treturn Contextified.get(value);\n\t\t} else if (Decontextify.proxies.has(value)) {\n\t\t\t// Decontextified proxy already exists, reuse\n\t\t\treturn Decontextify.proxies.get(value);\n\t\t}\n\n\t\tswitch (typeof value) {\n\t\t\tcase 'object':\n\t\t\t\tif (value === null) {\n\t\t\t\t\treturn null;\n\t\t\t\t} else if (value instanceof Number)         { return host.Number(value);\n\t\t\t\t} else if (value instanceof String)         { return host.String(value);\n\t\t\t\t} else if (value instanceof Boolean)        { return host.Boolean(value);\n\t\t\t\t} else if (value instanceof Date)           { return Decontextify.instance(value, host.Date, deepTraps, flags);\n\t\t\t\t} else if (value instanceof RangeError)     { return Decontextify.instance(value, host.RangeError, deepTraps, flags);\n\t\t\t\t} else if (value instanceof ReferenceError) { return Decontextify.instance(value, host.ReferenceError, deepTraps, flags);\n\t\t\t\t} else if (value instanceof SyntaxError)    { return Decontextify.instance(value, host.SyntaxError, deepTraps, flags);\n\t\t\t\t} else if (value instanceof TypeError)      { return Decontextify.instance(value, host.TypeError, deepTraps, flags);\n\t\t\t\t} else if (value instanceof VMError)        { return Decontextify.instance(value, host.VMError, deepTraps, flags);\n\t\t\t\t} else if (value instanceof Error)          { return Decontextify.instance(value, host.Error, deepTraps, flags);\n\t\t\t\t} else if (value instanceof Array)          { return Decontextify.instance(value, host.Array, deepTraps, flags);\n\t\t\t\t} else if (value instanceof RegExp)         { return Decontextify.instance(value, host.RegExp, deepTraps, flags);\n\t\t\t\t} else if (value instanceof Map)            { return Decontextify.instance(value, host.Map, deepTraps, flags);\n\t\t\t\t} else if (value instanceof WeakMap)        { return Decontextify.instance(value, host.WeakMap, deepTraps, flags);\n\t\t\t\t} else if (value instanceof Set)            { return Decontextify.instance(value, host.Set, deepTraps, flags);\n\t\t\t\t} else if (value instanceof WeakSet)        { return Decontextify.instance(value, host.WeakSet, deepTraps, flags);\n\t\t\t\t} else if (value instanceof Promise)        { return Decontextify.instance(value, host.Promise, deepTraps, flags);\n\t\t\t\t} else {\n\t\t\t\t\treturn Decontextify.object(value, traps, deepTraps, flags, mock);\n\t\t\t\t}\n\t\t\tcase 'function':\n\t\t\t\treturn Decontextify.function(value, traps, deepTraps, flags, mock);\n\n\t\t\tcase 'undefined':\n\t\t\t\treturn undefined;\n\n\t\t\tdefault: // string, number, boolean, symbol\n\t\t\t\treturn value;\n\t\t}\n\t}\n}\n\n/**\n * Contextify.\n */\n\nconst Contextify = {\n\tproxies: new host.WeakMap(),\n\n\targuments: function(args) {\n\t\tif (!host.Array.isArray(args)) return new Array();\n\n\t\tconst arr = new Array();\n\t\tfor (let i = 0, l = args.length; i < l; i++) arr[i] = Contextify.value(args[i]);\n\t\treturn arr;\n\t},\n\tinstance: function(instance, klass, deepTraps, flags) {\n\t\treturn Contextify.object(instance, {\n\t\t\tget: (target, key, receiver) => {\n\t\t\t\tif (key === 'vmProxyTarget' && DEBUG) return instance;\n\t\t\t\tif (key === 'isVMProxy') return true;\n\t\t\t\tif (key === 'constructor') return klass;\n\t\t\t\tif (key === '__proto__') return klass.prototype;\n\n\t\t\t\ttry {\n\t\t\t\t\treturn Contextify.value(instance[key], null, deepTraps, flags);\n\t\t\t\t} catch (e) {\n\t\t\t\t\tthrow Contextify.value(e);\n\t\t\t\t}\n\t\t\t},\n\t\t\tgetPrototypeOf: (target) => {\n\t\t\t\treturn klass.prototype;\n\t\t\t}\n\t\t}, deepTraps, flags);\n\t},\n\tfunction: function(fnc, traps, deepTraps, flags, mock) {\n\t\tconst self = Contextify.object(fnc, host.Object.assign({\n\t\t\tapply: (target, context, args) => {\n\t\t\t\ttry {\n\t\t\t\t\tcontext = Decontextify.value(context);\n\n\t\t\t\t\t// Set context of all arguments to host's context.\n\t\t\t\t\treturn Contextify.value(fnc.apply(context, Decontextify.arguments(args)));\n\t\t\t\t} catch (e) {\n\t\t\t\t\tthrow Contextify.value(e);\n\t\t\t\t}\n\t\t\t},\n\t\t\tconstruct: (target, args, newTarget) => {\n\t\t\t\ttry {\n\t\t\t\t\treturn Contextify.instance(new fnc(...Decontextify.arguments(args)), self, deepTraps, flags);\n\t\t\t\t} catch (e) {\n\t\t\t\t\tthrow Contextify.value(e);\n\t\t\t\t}\n\t\t\t},\n\t\t\tget: (target, key, receiver) => {\n\t\t\t\tif (key === 'vmProxyTarget' && DEBUG) return fnc;\n\t\t\t\tif (key === 'isVMProxy') return true;\n\t\t\t\tif (mock && key in mock) return mock[key];\n\t\t\t\tif (key === 'constructor') return Function;\n\t\t\t\tif (key === '__proto__') return Function.prototype;\n\n\t\t\t\ttry {\n\t\t\t\t\treturn Contextify.value(fnc[key], null, deepTraps, flags);\n\t\t\t\t} catch (e) {\n\t\t\t\t\tthrow Contextify.value(e);\n\t\t\t\t}\n\t\t\t},\n\t\t\tgetPrototypeOf: (target) => {\n\t\t\t\treturn Function.prototype;\n\t\t\t}\n\t\t}, traps), deepTraps);\n\n\t\treturn self;\n\t},\n\tobject: function(object, traps, deepTraps, flags, mock) {\n\t\tconst proxy = new host.Proxy(object, host.Object.assign({\n\t\t\tget: (target, key, receiver) => {\n\t\t\t\tif (key === 'vmProxyTarget' && DEBUG) return object;\n\t\t\t\tif (key === 'isVMProxy') return true;\n\t\t\t\tif (mock && key in mock) return mock[key];\n\t\t\t\tif (key === 'constructor') return Object;\n\t\t\t\tif (key === '__proto__') return Object.prototype;\n\n\t\t\t\ttry {\n\t\t\t\t\treturn Contextify.value(object[key], null, deepTraps, flags);\n\t\t\t\t} catch (e) {\n\t\t\t\t\tthrow Contextify.value(e);\n\t\t\t\t}\n\t\t\t},\n\t\t\tset: (target, key, value, receiver) => {\n\t\t\t\tif (flags && flags.protected && typeof value === 'function') return false;\n\n\t\t\t\ttry {\n\t\t\t\t\tobject[key] = Decontextify.value(value);\n\t\t\t\t\treturn true;\n\t\t\t\t} catch (e) {\n\t\t\t\t\tthrow Contextify.value(e);\n\t\t\t\t}\n\t\t\t},\n\t\t\tgetOwnPropertyDescriptor: (target, prop) => {\n\t\t\t\ttry {\n\t\t\t\t\tvar def = host.Object.getOwnPropertyDescriptor(object, prop);\n\t\t\t\t} catch (e) {\n\t\t\t\t\tthrow Contextify.value(e);\n\t\t\t\t}\n\n\t\t\t\t// Following code prevents V8 to throw\n\t\t\t\t// TypeError: 'getOwnPropertyDescriptor' on proxy: trap reported non-configurability for property '<prop>' which is either non-existant or configurable in the proxy target\n\n\t\t\t\tif (!def) {\n\t\t\t\t\treturn undefined;\n\t\t\t\t} else if (def.get || def.set) {\n\t\t\t\t\treturn {\n\t\t\t\t\t\tget: Contextify.value(def.get, null, deepTraps, flags) || undefined,\n\t\t\t\t\t\tset: Contextify.value(def.set, null, deepTraps, flags) || undefined,\n\t\t\t\t\t\tenumerable: def.enumerable === true,\n\t\t\t\t\t\tconfigurable: def.configurable === true\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\treturn {\n\t\t\t\t\t\tvalue: Contextify.value(def.value, null, deepTraps, flags),\n\t\t\t\t\t\twritable: def.writable === true,\n\t\t\t\t\t\tenumerable: def.enumerable === true,\n\t\t\t\t\t\tconfigurable: def.configurable === true\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\t\t\tdefineProperty: (target, key, descriptor) => {\n\t\t\t\tif (flags && flags.protected && typeof descriptor.value === 'function') return false;\n\n\t\t\t\ttry {\n\t\t\t\t\tif (descriptor.get || descriptor.set) {\n\t\t\t\t\t\treturn host.Object.defineProperty(target, key, {\n\t\t\t\t\t\t\tget: Decontextify.value(descriptor.get, null, deepTraps) || undefined,\n\t\t\t\t\t\t\tset: Decontextify.value(descriptor.set, null, deepTraps) || undefined,\n\t\t\t\t\t\t\tenumerable: descriptor.enumerable === true,\n\t\t\t\t\t\t\tconfigurable: descriptor.configurable === true\n\t\t\t\t\t\t})\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn host.Object.defineProperty(target, key, {\n\t\t\t\t\t\t\tvalue: Decontextify.value(descriptor.value, null, deepTraps),\n\t\t\t\t\t\t\twritable: descriptor.writable === true,\n\t\t\t\t\t\t\tenumerable: descriptor.enumerable === true,\n\t\t\t\t\t\t\tconfigurable: descriptor.configurable === true\n\t\t\t\t\t\t})\n\t\t\t\t\t}\n\t\t\t\t} catch (e) {\n\t\t\t\t\tthrow Contextify.value(e);\n\t\t\t\t}\n\t\t\t},\n\t\t\tgetPrototypeOf: (target) => {\n\t\t\t\treturn Object.prototype;\n\t\t\t},\n\t\t\tsetPrototypeOf: (target) => {\n\t\t\t\tthrow new VMError(OPNA);\n\t\t\t}\n\t\t}, traps, deepTraps));\n\n\t\tContextify.proxies.set(object, proxy);\n\t\tContextified.set(proxy, object);\n\t\treturn proxy;\n\t},\n\tvalue: function(value, traps, deepTraps, flags, mock) {\n\t\tif (Decontextified.has(value)) {\n\t\t\t// Decontextified object has returned back to vm\n\t\t\treturn Decontextified.get(value);\n\t\t} else if (Contextify.proxies.has(value)) {\n\t\t\t// Contextified proxy already exists, reuse\n\t\t\treturn Contextify.proxies.get(value);\n\t\t}\n\n\t\tswitch (typeof value) {\n\t\t\tcase 'object':\n\t\t\t\tif (value === null) {\n\t\t\t\t\treturn null;\n\t\t\t\t} else if (value instanceof host.Number)         { return host.Number(value);\n\t\t\t\t} else if (value instanceof host.String)         { return host.String(value);\n\t\t\t\t} else if (value instanceof host.Boolean)        { return host.Boolean(value);\n\t\t\t\t} else if (value instanceof host.Date)           { return Contextify.instance(value, Date, deepTraps, flags);\n\t\t\t\t} else if (value instanceof host.RangeError)     { return Contextify.instance(value, RangeError, deepTraps, flags);\n\t\t\t\t} else if (value instanceof host.ReferenceError) { return Contextify.instance(value, ReferenceError, deepTraps, flags);\n\t\t\t\t} else if (value instanceof host.SyntaxError)    { return Contextify.instance(value, SyntaxError, deepTraps, flags);\n\t\t\t\t} else if (value instanceof host.TypeError)      { return Contextify.instance(value, TypeError, deepTraps, flags);\n\t\t\t\t} else if (value instanceof host.VMError)        { return Contextify.instance(value, VMError, deepTraps, flags);\n\t\t\t\t} else if (value instanceof host.Error)          { return Contextify.instance(value, Error, deepTraps, flags);\n\t\t\t\t} else if (value instanceof host.Array)          { return Contextify.instance(value, Array, deepTraps, flags);\n\t\t\t\t} else if (value instanceof host.RegExp)         { return Contextify.instance(value, RegExp, deepTraps, flags);\n\t\t\t\t} else if (value instanceof host.Map)            { return Contextify.instance(value, Map, deepTraps, flags);\n\t\t\t\t} else if (value instanceof host.WeakMap)        { return Contextify.instance(value, WeakMap, deepTraps, flags);\n\t\t\t\t} else if (value instanceof host.Set)            { return Contextify.instance(value, Set, deepTraps, flags);\n\t\t\t\t} else if (value instanceof host.WeakSet)        { return Contextify.instance(value, WeakSet, deepTraps, flags);\n\t\t\t\t} else if (value instanceof host.Promise)        { return Contextify.instance(value, Promise, deepTraps, flags);\n\t\t\t\t} else if (value instanceof host.Buffer)         { return Contextify.instance(value, LocalBuffer, deepTraps, flags);\n\t\t\t\t} else {\n\t\t\t\t\treturn Contextify.object(value, traps, deepTraps, flags, mock);\n\t\t\t\t}\n\t\t\tcase 'function':\n\t\t\t\treturn Contextify.function(value, traps, deepTraps, flags, mock);\n\n\t\t\tcase 'undefined':\n\t\t\t\treturn undefined;\n\n\t\t\tdefault: // string, number, boolean, symbol\n\t\t\t\treturn value;\n\t\t}\n\t},\n\tglobalValue: function(value, name) {\n\t\treturn global[name] = Contextify.value(value);\n\t},\n\treadonly: function(value, mock) {\n\t\treturn Contextify.value(value, null, FROZEN_TRAPS, null, mock);\n\t},\n\tprotected: function(value, mock) {\n\t\treturn Contextify.value(value, null, null, {protected: true}, mock);\n\t}\n}\n\nconst LocalBuffer = global.Buffer = Contextify.readonly(host.Buffer);\n\nreturn {\n\tContextify,\n\tDecontextify,\n\tBuffer: LocalBuffer\n}\n","/home/travis/build/npmtest/node-npmtest-vm2/node_modules/vm2/lib/sandbox.js":"const {Script} = host.require('vm');\nconst fs = host.require('fs');\nconst pa = host.require('path');\nconst console = host.console;\n\nconst BUILTIN_MODULES = host.process.binding('natives');\nconst JSON_PARSE = JSON.parse;\n\n/**\n * @param {Object} host Hosts's internal objects.\n */\n\nreturn ((vm, host) => {\n\t'use strict';\n\n\tconst global = this;\n\n\tconst TIMERS = new host.WeakMap()\n\tconst BUILTINS = {};\n\tconst CACHE = {};\n\tconst EXTENSIONS = {\n\t\t[\".json\"](module, filename) {\n\t\t\ttry {\n\t\t\t\tvar code = fs.readFileSync(filename, \"utf8\");\n\t\t\t} catch (e) {\n\t\t\t\tthrow Contextify.value(e);\n\t\t\t}\n\n\t\t\tmodule.exports = JSON_PARSE(code);\n\t\t},\n\t\t[\".node\"](module, filename) {\n\t\t\tif (vm.options.require.context === 'sandbox') throw new VMError('Native modules can be required only with context set to \\'host\\'.');\n\n\t\t\ttry {\n\t\t\t\tmodule.exports = Contextify.readonly(host.require(filename));\n\t\t\t} catch (e) {\n\t\t\t\tthrow Contextify.value(e);\n\t\t\t}\n\t\t},\n\t\t[\".js\"](module, filename, dirname) {\n\t\t\tif (vm.options.require.context !== 'sandbox') {\n\t\t\t\ttry {\n\t\t\t\t\tmodule.exports = Contextify.readonly(host.require(filename));\n\t\t\t\t} catch (e) {\n\t\t\t\t\tthrow Contextify.value(e);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttry {\n\t\t\t\t\t// Load module\n\t\t\t\t\tvar code = `(function (exports, require, module, __filename, __dirname) { 'use strict'; ${fs.readFileSync(filename, \"utf8\")} \\n});`;\n\n\t\t\t\t\t// Precompile script\n\t\t\t\t\tconst script = new Script(code, {\n\t\t\t\t\t\tfilename: filename || \"vm.js\",\n\t\t\t\t\t\tdisplayErrors: false\n\t\t\t\t\t});\n\n\t\t\t\t\tvar closure = script.runInContext(global, {\n\t\t\t\t\t\tfilename: filename || \"vm.js\",\n\t\t\t\t\t\tdisplayErrors: false\n\t\t\t\t\t});\n\t\t\t\t} catch (ex) {\n\t\t\t\t\tthrow Contextify.value(ex);\n\t\t\t\t}\n\n\t\t\t\t// run script\n\t\t\t\tclosure(module.exports, module.require, module, filename, dirname);\n\t\t\t}\n\t\t}\n\t};\n\n\t/**\n\t * Resolve filename.\n\t */\n\n\tconst _resolveFilename = function(path) {\n\t\tpath = pa.resolve(path);\n\n\t\tconst exists = fs.existsSync(path);\n\t\tconst isdir = exists ? fs.statSync(path).isDirectory() : false;\n\n\t\t// direct file match\n\t\tif (exists && !isdir) return path;\n\n\t\t// load as file\n\n\t\tif (fs.existsSync(`${path}.js`)) return `${path}.js`;\n\t\tif (fs.existsSync(`${path}.node`)) return `${path}.node`;\n\t\tif (fs.existsSync(`${path}.json`)) return `${path}.json`;\n\n\t\t// load as directory\n\n\t\tif (fs.existsSync(`${path}/package.json`)) {\n\t\t\ttry {\n\t\t\t\tvar pkg = JSON.parse(fs.readFileSync(`${path}/package.json`, \"utf8\"));\n\t\t\t\tif (pkg.main == null) pkg.main = \"index.js\";\n\t\t\t} catch (ex) {\n\t\t\t\tthrow new VMError(`Module '${modulename}' has invalid package.json`, \"EMODULEINVALID\");\n\t\t\t}\n\n\t\t\treturn _resolveFilename(`${path}/${pkg.main}`);\n\t\t}\n\n\t\tif (fs.existsSync(`${path}/index.js`)) return `${path}/index.js`;\n\t\tif (fs.existsSync(`${path}/index.node`)) return `${path}/index.node`;\n\n\t\treturn null;\n\t};\n\n\t/**\n\t * Builtin require.\n\t */\n\n\tconst _requireBuiltin = function(modulename) {\n\t\tif (modulename === 'buffer') return ({Buffer});\n\t\tif (BUILTINS[modulename]) return BUILTINS[modulename].exports; // Only compiled builtins are stored here\n\n\t\tif (modulename === 'util') {\n\t\t\treturn Contextify.readonly(host.require(modulename), {\n\t\t\t\t// Allows VM context to use util.inherits\n\t\t\t\tinherits: function(ctor, superCtor) {\n\t\t\t\t\tctor.super_ = superCtor;\n\t\t\t\t\tObject.setPrototypeOf(ctor.prototype, superCtor.prototype);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\tif (modulename === 'events') {\n\t\t\ttry {\n\t\t\t\tconst script = new Script(`(function (exports, require, module, process) { 'use strict'; ${BUILTIN_MODULES[modulename]} \\n});`, {\n\t\t\t\t\tfilename: `${modulename}.vm.js`\n\t\t\t\t});\n\n\t\t\t\t// setup module scope\n\t\t\t\tconst module = BUILTINS[modulename] = {\n\t\t\t\t\texports: {},\n\t\t\t\t\trequire: _requireBuiltin\n\t\t\t\t};\n\n\t\t\t\t// run script\n\t\t\t\tscript.runInContext(global)(module.exports, module.require, module, host.process);\n\n\t\t\t\treturn module.exports;\n\t\t\t} catch (e) {\n\t\t\t\tthrow Contextify.value(e);\n\t\t\t}\n\t\t}\n\n\t\treturn Contextify.readonly(host.require(modulename));\n\t};\n\n\t/**\n\t * Prepare require.\n\t */\n\n\tconst _prepareRequire = function(current_dirname) {\n\t\tconst _require = function(modulename) {\n\t\t\tif (vm.options.nesting && modulename === 'vm2') return {VM: Contextify.readonly(host.VM), NodeVM: Contextify.readonly(host.NodeVM)};\n\t\t\tif (!vm.options.require) throw new VMError(`Access denied to require '${modulename}'`, \"EDENIED\");\n\t\t\tif (modulename == null) throw new VMError(\"Module '' not found.\", \"ENOTFOUND\");\n\t\t\tif (typeof modulename !== 'string') throw new VMError(`Invalid module name '${modulename}'`, \"EINVALIDNAME\");\n\n\t\t\t// Mock?\n\n\t\t\tif (vm.options.require.mock && vm.options.require.mock[modulename]) {\n\t\t\t\treturn Contextify.readonly(vm.options.require.mock[modulename]);\n\t\t\t}\n\n\t\t\t// Builtin?\n\n\t\t\tif (BUILTIN_MODULES[modulename]) {\n\t\t\t\tif (host.Array.isArray(vm.options.require.builtin)) {\n\t\t\t\t\tif (vm.options.require.builtin.indexOf('*') >= 0) {\n\t\t\t\t\t\tif (vm.options.require.builtin.indexOf(`-${modulename}`) >= 0) {\n\t\t\t\t\t\t\tthrow new VMError(`Access denied to require '${modulename}'`, \"EDENIED\");\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if (vm.options.require.builtin.indexOf(modulename) === -1) {\n\t\t\t\t\t\tthrow new VMError(`Access denied to require '${modulename}'`, \"EDENIED\");\n\t\t\t\t\t}\n\t\t\t\t} else if (vm.options.require.builtin) {\n\t\t\t\t\tif (!vm.options.require.builtin[modulename]) {\n\t\t\t\t\t\tthrow new VMError(`Access denied to require '${modulename}'`, \"EDENIED\");\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tthrow new VMError(`Access denied to require '${modulename}'`, \"EDENIED\");\n\t\t\t\t}\n\n\t\t\t\treturn _requireBuiltin(modulename);\n\t\t\t}\n\n\t\t\t// External?\n\n\t\t\tif (!vm.options.require.external) throw new VMError(`Access denied to require '${modulename}'`, \"EDENIED\");\n\n\t\t\tif (/^(\\.|\\.\\/|\\.\\.\\/)/.exec(modulename)) {\n\t\t\t\t// Module is relative file, e.g. ./script.js or ../script.js\n\n\t\t\t\tif (!current_dirname) throw new VMError(\"You must specify script path to load relative modules.\", \"ENOPATH\");\n\n\t\t\t\tvar filename = _resolveFilename(`${current_dirname}/${modulename}`);\n\t\t\t} else if (/^(\\/|\\\\|[a-zA-Z]:\\\\)/.exec(modulename)) {\n\t\t\t\t// Module is absolute file, e.g. /script.js or //server/script.js or C:\\script.js\n\n\t\t\t\tvar filename = _resolveFilename(modulename);\n\t\t\t} else {\n\t\t\t\t// Check node_modules in path\n\n\t\t\t\tif (!current_dirname) throw new VMError(\"You must specify script path to load relative modules.\", \"ENOPATH\");\n\n\t\t\t\tconst paths = current_dirname.split(pa.sep);\n\n\t\t\t\twhile (paths.length) {\n\t\t\t\t\tlet path = paths.join(pa.sep);\n\n\t\t\t\t\t//console.log modulename, \"#{path}#{pa.sep}node_modules#{pa.sep}#{modulename}\"\n\n\t\t\t\t\tvar filename = _resolveFilename(`${path}${pa.sep}node_modules${pa.sep}${modulename}`);\n\t\t\t\t\tif (filename) break;\n\n\t\t\t\t\tpaths.pop();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (!filename) throw new VMError(`Cannot find module '${modulename}'`, \"ENOTFOUND\");\n\n\t\t\t// return cache whenever possible\n\t\t\tif (CACHE[filename]) return CACHE[filename].exports;\n\n\t\t\tconst dirname = pa.dirname(filename);\n\t\t\tconst extname = pa.extname(filename);\n\n\t\t\tif (vm.options.require.root) {\n\t\t\t\tconst requiredPath = pa.resolve(vm.options.require.root);\n\t\t\t\tif (dirname.indexOf(requiredPath) !== 0) {\n\t\t\t\t\tthrow new VMError(`Module '${modulename}' is not allowed to be required. The path is outside the border!`, \"EDENIED\");\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst module = CACHE[filename] = {\n\t\t\t\tfilename,\n\t\t\t\texports: {},\n\t\t\t\trequire: _prepareRequire(dirname)\n\t\t\t};\n\n\t\t\t// lookup extensions\n\n\t\t\tif (EXTENSIONS[extname]) {\n\t\t\t\tEXTENSIONS[extname](module, filename, dirname);\n\t\t\t\treturn module.exports;\n\t\t\t}\n\n\t\t\tthrow new VMError(`Failed to load '${modulename}': Unknown type.`, \"ELOADFAIL\");\n\t\t};\n\n\t\treturn _require;\n\t};\n\n\t/**\n\t * Prepare sandbox.\n\t */\n\n\tglobal.setTimeout = function(callback, delay, ...args) {\n\t\tconst tmr = host.setTimeout(function() {\n\t\t\tcallback.apply(null, args)\n\t\t}, delay);\n\n\t\tconst local = {\n\t\t\tref() { return tmr.ref(); },\n\t\t\tunref() { return tmr.unref(); }\n\t\t};\n\n\t\tTIMERS.set(local, tmr);\n\t\treturn local;\n\t};\n\n\tglobal.setInterval = function(callback, interval, ...args) {\n\t\tconst tmr = host.setInterval(function() {\n\t\t\tcallback.apply(null, args)\n\t\t}, interval);\n\n\t\tconst local = {\n\t\t\tref() { return tmr.ref(); },\n\t\t\tunref() { return tmr.unref(); }\n\t\t};\n\n\t\tTIMERS.set(local, tmr);\n\t\treturn local;\n\t};\n\n\tglobal.setImmediate = function(callback, ...args) {\n\t\tconst tmr = host.setImmediate(function() {\n\t\t\tcallback.apply(null, args)\n\t\t});\n\n\t\tconst local = {\n\t\t\tref() { return tmr.ref(); },\n\t\t\tunref() { return tmr.unref(); }\n\t\t};\n\n\t\tTIMERS.set(local, tmr);\n\t\treturn local;\n\t};\n\n\tglobal.clearTimeout = function(local) {\n\t\thost.clearTimeout(TIMERS.get(local));\n\t\treturn null;\n\t};\n\n\tglobal.clearInterval = function(local) {\n\t\thost.clearInterval(TIMERS.get(local));\n\t\treturn null;\n\t};\n\n\tglobal.clearImmediate = function(local) {\n\t\thost.clearImmediate(TIMERS.get(local));\n\t\treturn null;\n\t};\n\n\tglobal.process = {\n\t\targv: [],\n\t\ttitle: host.process.title,\n\t\tversion: host.process.version,\n\t\tversions: Contextify.readonly(host.process.versions),\n\t\tarch: host.process.arch,\n\t\tplatform: host.process.platform,\n\t\tenv: {},\n\t\tpid: host.process.pid,\n\t\tfeatures: Contextify.readonly(host.process.features),\n\t\tnextTick(callback) { return host.process.nextTick(() => callback.call(null)); },\n\t\thrtime() { return host.process.hrtime(); },\n\t\tcwd() { return host.process.cwd(); },\n\t\ton(name, handler) {\n\t\t\tif (name !== 'beforeExit' && name !== 'exit') {\n\t\t\t\tthrow new Error(`Access denied to listen for '${name}' event.`);\n\t\t\t}\n\n\t\t\thost.process.on(name, Decontextify.value(handler));\n\t\t\treturn this;\n\t\t},\n\n\t\tonce(name, handler) {\n\t\t\tif (name !== 'beforeExit' && name !== 'exit') {\n\t\t\t\tthrow new Error(`Access denied to listen for '${name}' event.`);\n\t\t\t}\n\n\t\t\thost.process.once(name, Decontextify.value(handler));\n\t\t\treturn this;\n\t\t},\n\n\t\tlisteners(name) {\n\t\t\treturn Contextify.readonly(host.process.listeners(name));\n\t\t},\n\n\t\tremoveListener(name, handler) {\n\t\t\thost.process.removeListener(name, Decontextify.value(handler));\n\t\t\treturn this;\n\t\t},\n\n\t\tumask() {\n\t\t\tif (arguments.length) {\n\t\t\t\tthrow new Error(\"Access denied to set umask.\");\n\t\t\t}\n\n\t\t\treturn host.process.umask();\n\t\t}\n\t};\n\n\tif (vm.options.console === 'inherit') {\n\t\tglobal.console = Contextify.readonly(host.console);\n\t} else if (vm.options.console === 'redirect') {\n\t\tglobal.console = {\n\t\t\tlog(...args) {\n\t\t\t\tvm.emit('console.log', ...Decontextify.arguments(args));\n\t\t\t\treturn null;\n\t\t\t},\n\t\t\tinfo(...args) {\n\t\t\t\tvm.emit('console.info', ...Decontextify.arguments(args));\n\t\t\t\treturn null;\n\t\t\t},\n\t\t\twarn(...args) {\n\t\t\t\tvm.emit('console.warn', ...Decontextify.arguments(args));\n\t\t\t\treturn null;\n\t\t\t},\n\t\t\terror(...args) {\n\t\t\t\tvm.emit('console.error', ...Decontextify.arguments(args));\n\t\t\t\treturn null;\n\t\t\t},\n\t\t\tdir(...args) {\n\t\t\t\tvm.emit('console.dir', ...Decontextify.arguments(args));\n\t\t\t\treturn null;\n\t\t\t},\n\t\t\ttime: () => {},\n\t\t\ttimeEnd: () => {},\n\t\t\ttrace(...args) {\n\t\t\t\tvm.emit('console.trace', ...Decontextify.arguments(args));\n\t\t\t\treturn null;\n\t\t\t}\n\t\t};\n\t}\n\n\t/*\n\tReturn contextized require.\n\t*/\n\n\treturn _prepareRequire;\n})(vm, host);\n"}